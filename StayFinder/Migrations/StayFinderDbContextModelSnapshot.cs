// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StayFinder.Data;

#nullable disable

namespace StayFinder.Migrations
{
    [DbContext(typeof(StayFinderDbContext))]
    partial class StayFinderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StayFinder.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BookingNotes")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("booking_notes");

                    b.Property<string>("BookingReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("booking_reference");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2")
                        .HasColumnName("check_in");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2")
                        .HasColumnName("check_out");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("Guests")
                        .HasColumnType("int")
                        .HasColumnName("guests");

                    b.Property<int>("PropertyId")
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Confirmed")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("BookingReference")
                        .IsUnique()
                        .HasDatabaseName("IX_Bookings_BookingReference");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("bookings", null, t =>
                        {
                            t.HasCheckConstraint("CK_Bookings_Status", "[status] IN ('Confirmed', 'Pending', 'Cancelled', 'Completed')");
                        });
                });

            modelBuilder.Entity("StayFinder.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("property_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailableFrom")
                        .HasColumnType("datetime2")
                        .HasColumnName("available_from");

                    b.Property<DateTime>("AvailableTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("available_to");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("city");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_path");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("location");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(2,1)")
                        .HasColumnName("rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("properties", null, t =>
                        {
                            t.HasCheckConstraint("CK_Properties_Type", "[type] IN ('apartment', 'villa', 'room')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2025, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "New York",
                            Description = "Beautiful modern apartment with city views, fully furnished with modern amenities. Perfect for business travelers.",
                            ImagePath = "files/images/1.jpg",
                            Location = "123 Main Street",
                            Price = 150.00m,
                            PropertyType = "apartment",
                            Rating = 4.5m,
                            Title = "Modern Apartment in Downtown"
                        },
                        new
                        {
                            Id = 2,
                            AvailableFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2025, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Miami",
                            Description = "Stunning villa with private pool and ocean view. Spacious living areas and luxury amenities.",
                            ImagePath = "files/images/2.jpg",
                            Location = "456 Ocean Drive",
                            Price = 300.00m,
                            PropertyType = "villa",
                            Rating = 4.8m,
                            Title = "Luxury Villa with Pool"
                        },
                        new
                        {
                            Id = 3,
                            AvailableFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2026, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "San Francisco",
                            Description = "Comfortable private room in shared house with friendly hosts. Great location near public transport.",
                            ImagePath = "files/images/3.jpg",
                            Location = "789 Park Avenue",
                            Price = 80.00m,
                            PropertyType = "room",
                            Rating = 4.2m,
                            Title = "Cozy Private Room"
                        },
                        new
                        {
                            Id = 4,
                            AvailableFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Chicago",
                            Description = "Luxury penthouse with panoramic city views. Premium location in downtown area.",
                            ImagePath = "files/images/4.jpg",
                            Location = "101 Skyline Boulevard",
                            Price = 450.00m,
                            PropertyType = "apartment",
                            Rating = 4.9m,
                            Title = "Penthouse Suite"
                        },
                        new
                        {
                            Id = 5,
                            AvailableFrom = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            AvailableTo = new DateTime(2025, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            City = "Los Angeles",
                            Description = "Beautiful beach house with direct beach access. Perfect for family vacations.",
                            ImagePath = "files/images/5.jpg",
                            Location = "202 Coastal Road",
                            Price = 250.00m,
                            PropertyType = "villa",
                            Rating = 4.6m,
                            Title = "Beach House Getaway"
                        });
                });

            modelBuilder.Entity("StayFinder.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("customer")
                        .HasColumnName("role");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email");

                    b.ToTable("users", null, t =>
                        {
                            t.HasCheckConstraint("CK_Users_Role", "[role] IN ('customer', 'host', 'admin')");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 9, 14, 10, 10, 53, 92, DateTimeKind.Utc).AddTicks(7815),
                            Email = "ahmadzubayer007@gmail.com",
                            FirstName = "Ahmad",
                            IsActive = true,
                            LastName = "Zubayer",
                            PasswordHash = "hashed_12345",
                            Phone = "123-456-7890",
                            Role = "customer",
                            UpdatedAt = new DateTime(2025, 9, 14, 10, 10, 53, 92, DateTimeKind.Utc).AddTicks(7909)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 9, 14, 10, 10, 53, 92, DateTimeKind.Utc).AddTicks(7990),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            IsActive = true,
                            LastName = "Smith",
                            PasswordHash = "hashed_password",
                            Phone = "987-654-3210",
                            Role = "host",
                            UpdatedAt = new DateTime(2025, 9, 14, 10, 10, 53, 92, DateTimeKind.Utc).AddTicks(7990)
                        });
                });

            modelBuilder.Entity("StayFinder.Models.Booking", b =>
                {
                    b.HasOne("StayFinder.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Properties");

                    b.HasOne("StayFinder.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Bookings_Users");

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StayFinder.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
